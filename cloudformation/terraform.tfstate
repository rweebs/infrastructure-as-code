{
  "version": 4,
  "terraform_version": "1.3.0",
  "serial": 14,
  "lineage": "9a764a56-45a4-1a61-0d30-2026f88630c3",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:000288798409:stack/ec2/7127a1d0-8809-11ee-9b13-121a44162c3f",
            "name": "ec2",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "InstanceId": "i-0351a9fbead59e16a"
            },
            "parameters": {},
            "policy_body": null,
            "policy_url": null,
            "tags": null,
            "tags_all": {},
            "template_body": "AWSTemplateFormatVersion: 2010-09-09\nDescription: \n  Sample template to provision an EC2 Instance with public IP. Create a Security Group and associate with this EC2.\n  You will be billed for the AWS resources used if you create a stack from this template.\n  After deleting stack, remember to delete the associated S3 bucket.\n\n# get the name of the base stack which is created first and has VPC details\nParameters:\n  VPCStackName:\n    Description: VPC\n    Type: String\n    Default: vpc\n    \n  KeyPairName:\n    Description: KeyPair\n    Type: 'AWS::EC2::KeyPair::KeyName'  # standard type\n    ConstraintDescription: must be the name of an existing EC2 KeyPair.\n    Default: tf-key-pair\n  \n  InstanceType:\n    Description: EC2 instance type\n    Type: String\n    Default: t3.micro\n    \n  InstanceImageId:\n    Description: EC2 Image Id from this region\n    Type: AWS::EC2::Image::Id\n    Default: ami-04cb4ca688797756f # defaults for amazon linux in us-east-1 region  \n    \nResources:\n  # create a security group\n  mySG:\n    Type: AWS::EC2::SecurityGroup\n    Properties: \n      GroupDescription: Enable http(80) \u0026 ssh(22) access\n      GroupName: WebServer-SG\n      VpcId: \n        Fn::ImportValue: !Sub \"${VPCStackName}-VPCID\" # note here we are not using AWS::StackName\n      SecurityGroupIngress:\n        # allow ssh  \n        - IpProtocol: tcp\n          FromPort: '22'\n          ToPort: '22'\n          CidrIp: 0.0.0.0/0 # only for demo else use your IP or corporate gateway IP\n      Tags: \n       - Key: Name\n         Value: demo-sg\n       - Key: Application\n         Value:\n           Ref: \"AWS::StackName\"\n  \n  # allow local traffic\n  SGBaseIngress:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      GroupId: !Ref mySG\n      IpProtocol: '-1'\n      FromPort: '-1'\n      ToPort: '-1'\n      SourceSecurityGroupId: !Ref mySG\n  \n  # EC2 instance which will have access for http and ssh\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      InstanceType: !Ref InstanceType\n      SubnetId:\n        Fn::ImportValue: !Sub \"${VPCStackName}-SUBNET\"      \n      SecurityGroupIds:\n        - !Ref mySG\n      KeyName: !Ref KeyPairName\n      ImageId: !Ref InstanceImageId\n      UserData: \n        Fn::Base64: |\n          #!/bin/bash -xe\n          yum update -y # good practice to update existing packages\n          yum install -y httpd # install web server \n          systemctl start httpd\n          systemctl enable httpd\n          echo \"Hello World\" \u003e /var/www/html/index.html\n            \n      Tags: \n       - Key: Name\n         Value: demo-ec2\n       - Key: Application\n         Value:\n           Ref: \"AWS::StackName\"\n           \n# output important values for easy viewing in cloudformation dashboard\nOutputs:\n  InstanceId:\n    Description: InstanceId of the first EC2 instance\n    Value: !Ref EC2Instance",
            "template_url": null,
            "timeout_in_minutes": 0,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_cloudformation_stack.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:000288798409:stack/vpc/3eafeed0-8807-11ee-95ce-0e03ff25aa85",
            "name": "vpc",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "PublicSubnetID": "subnet-0e390c27e796283e9",
              "VpcID": "vpc-0a48b661be7805d1d"
            },
            "parameters": {},
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "tags_all": {},
            "template_body": "AWSTemplateFormatVersion: 2010-09-09\nDescription: \n  Sample template to create a VPC with IGW and public IP enabled.\n  You will be billed for the AWS resources used if you create a stack from this template.\n  After deleting stack, remember to delete the associated S3 bucket.\n\nParameters:\n  # CIDR of VPC\n  NetworkCIDR:\n    Description: CIDR of the new VPC\n    Type: String\n    Default: 10.1.0.0/16\n    \n  # AZ Name where subnet will be created\n  AvailabilityZoneName:\n    Description: CIDR of the new VPC\n    Type: AWS::EC2::AvailabilityZone::Name\n    Default: us-east-1a\n    \n  # CIDR of new subnet within this VPC\n  SubnetCIDR:\n    Description: CIDR of the new subnet within this VPC\n    Type: String\n    Default: 10.1.0.0/24 \n    \nResources:\n  # create VPC\n  myVPC:\n    Type: AWS::EC2::VPC\n    Properties: \n      CidrBlock: !Ref NetworkCIDR\n      EnableDnsHostnames: 'true'\n      EnableDnsSupport: 'true'\n      InstanceTenancy: default\n      Tags: \n       - Key: Name\n         Value: vpc-b\n       - Key: Application\n         Value: !Ref 'AWS::StackName'\n  \n  # create Internet Gateway\n  myIGW:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags: \n       - Key: Name\n         Value: demo-igw\n       - Key: Application\n         Value: !Ref 'AWS::StackName'           \n  \n  # attaching the IGW to my VPC\n  vpcToIgw:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref myVPC\n      InternetGatewayId: !Ref myIGW\n\n  # create a custom route table for demo vpc\n  myRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref myVPC\n      Tags: \n       - Key: Name\n         Value: demo-public-route-table\n       - Key: Application\n         Value: !Ref 'AWS::StackName'\n  \n  # Add routes entries for public network through igw\n  myRoutes:\n    Type: AWS::EC2::Route    \n    Properties:\n      RouteTableId: !Ref myRouteTable\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref myIGW      \n  \n  # NACL\n  myPublicNACL:\n    Type: 'AWS::EC2::NetworkAcl'\n    Properties:\n      VpcId: !Ref myVPC\n      Tags:\n        - Key: Name\n          Value: demo-vpc-nacl\n        - Key: Application\n          Value: !Ref 'AWS::StackName'        \n          \n  # Allow all Incoming TCP traffic\n  myNaclRulesForInboundTCP:\n    Type: 'AWS::EC2::NetworkAclEntry'\n    Properties:\n      NetworkAclId: !Ref myPublicNACL\n      RuleNumber: '100'\n      Protocol: '6'  # tcp\n      RuleAction: allow\n      Egress: 'false'  # this rule applies to ingress traffic to the subnet\n      CidrBlock: 0.0.0.0/0  # any ip address\n      PortRange:\n        From: '0'\n        To: '65535'\n          \n  # Allow all Outgoing TCP traffic\n  myNaclRulesForOutboundTCP:\n    Type: 'AWS::EC2::NetworkAclEntry'\n    Properties:\n      NetworkAclId: !Ref myPublicNACL\n      RuleNumber: '100'\n      Protocol: '6'  # tcp\n      RuleAction: allow\n      Egress: 'true'  # this rule applies to egress traffic from the subnet\n      CidrBlock: 0.0.0.0/0\n      PortRange:\n        From: '0'  # client will be using ephemeral port, using 80 or 22 here will not work\n        To: '65535'\n                \n  # creating a public subnet\n  myPublicSubnet:\n    Type: AWS::EC2::Subnet\n    Properties: \n      VpcId: !Ref myVPC\n      AvailabilityZone: !Ref AvailabilityZoneName\n      CidrBlock: !Ref SubnetCIDR\n      MapPublicIpOnLaunch: true\n      Tags: \n      - Key: Name\n        Value: \n          !Join \n          - ''\n          - - 'public-subnet-'\n            - !Ref AvailabilityZoneName\n      - Key: Application\n        Value: !Ref 'AWS::StackName'\n  \n  # asscoiate subnet with our route table else by default it is asscoiated with main route table\n  mySubnetRouteTableAssociation:\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\n    Properties:\n      SubnetId: !Ref myPublicSubnet\n      RouteTableId: !Ref myRouteTable\n      \n  # associate subnet with NACL else by default it is asscoiated with main NACLs\n  mySubnetNaclAssociation:\n    Type: 'AWS::EC2::SubnetNetworkAclAssociation'\n    Properties:\n      SubnetId: !Ref myPublicSubnet\n      NetworkAclId: !Ref myPublicNACL\n\n# output key resources ids and export the values for cross-stack referencing\nOutputs:\n  VpcID:\n    Description: ID of the newly created VPC\n    Value: !Ref myVPC\n    Export:\n      Name: !Sub \"${AWS::StackName}-VPCID\" # the name for cross referencing\n    \n  PublicSubnetID:\n    Description: SubnetId of the public subnet\n    Value: !Ref myPublicSubnet\n    Export:\n      Name: !Sub \"${AWS::StackName}-SUBNET\"",
            "template_url": null,
            "timeout_in_minutes": 0,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    }
  ],
  "check_results": []
}
